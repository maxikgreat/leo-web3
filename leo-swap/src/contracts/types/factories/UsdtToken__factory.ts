/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { UsdtToken, UsdtTokenInterface } from "../UsdtToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040518060400160405280600d81526020017f537461626c6520646f6c6c6172000000000000000000000000000000000000008152506040518060400160405280600481526020017f5553445400000000000000000000000000000000000000000000000000000000815250816003908051906020019062000096929190620000b8565b508060049080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b61157d80620001dd6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101a357806395d89b41146101d3578063a0712d68146101f1578063a457c2d714610221578063a9059cbb14610251578063dd62ed3e14610281576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633950935114610173575b600080fd5b6100c16102b1565b6040516100ce9190610ffa565b60405180910390f35b6100f160048036038101906100ec9190610dfc565b610343565b6040516100fe9190610fdf565b60405180910390f35b61010f610366565b60405161011c919061111c565b60405180910390f35b61013f600480360381019061013a9190610dad565b610370565b60405161014c9190610fdf565b60405180910390f35b61015d61039f565b60405161016a9190611137565b60405180910390f35b61018d60048036038101906101889190610dfc565b6103a8565b60405161019a9190610fdf565b60405180910390f35b6101bd60048036038101906101b89190610d48565b610452565b6040516101ca919061111c565b60405180910390f35b6101db61049a565b6040516101e89190610ffa565b60405180910390f35b61020b60048036038101906102069190610e38565b61052c565b604051610218919061111c565b60405180910390f35b61023b60048036038101906102369190610dfc565b610540565b6040516102489190610fdf565b60405180910390f35b61026b60048036038101906102669190610dfc565b61062a565b6040516102789190610fdf565b60405180910390f35b61029b60048036038101906102969190610d71565b61064d565b6040516102a8919061111c565b60405180910390f35b6060600380546102c09061124c565b80601f01602080910402602001604051908101604052809291908181526020018280546102ec9061124c565b80156103395780601f1061030e57610100808354040283529160200191610339565b820191906000526020600020905b81548152906001019060200180831161031c57829003601f168201915b5050505050905090565b60008061034e6106d4565b905061035b8185856106dc565b600191505092915050565b6000600254905090565b60008061037b6106d4565b90506103888582856108a7565b610393858585610933565b60019150509392505050565b60006006905090565b6000806103b36106d4565b9050610447818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610442919061116e565b6106dc565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104a99061124c565b80601f01602080910402602001604051908101604052809291908181526020018280546104d59061124c565b80156105225780601f106104f757610100808354040283529160200191610522565b820191906000526020600020905b81548152906001019060200180831161050557829003601f168201915b5050505050905090565b60006105383383610bb4565b819050919050565b60008061054b6106d4565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015610611576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610608906110dc565b60405180910390fd5b61061e82868684036106dc565b60019250505092915050565b6000806106356106d4565b9050610642818585610933565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561074c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610743906110bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b39061103c565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161089a919061111c565b60405180910390a3505050565b60006108b3848461064d565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461092d578181101561091f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109169061105c565b60405180910390fd5b61092c84848484036106dc565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099a9061109c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0a9061101c565b60405180910390fd5b610a1e838383610d14565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9b9061107c565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b37919061116e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b9b919061111c565b60405180910390a3610bae848484610d19565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b906110fc565b60405180910390fd5b610c3060008383610d14565b8060026000828254610c42919061116e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c97919061116e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610cfc919061111c565b60405180910390a3610d1060008383610d19565b5050565b505050565b505050565b600081359050610d2d81611519565b92915050565b600081359050610d4281611530565b92915050565b600060208284031215610d5a57600080fd5b6000610d6884828501610d1e565b91505092915050565b60008060408385031215610d8457600080fd5b6000610d9285828601610d1e565b9250506020610da385828601610d1e565b9150509250929050565b600080600060608486031215610dc257600080fd5b6000610dd086828701610d1e565b9350506020610de186828701610d1e565b9250506040610df286828701610d33565b9150509250925092565b60008060408385031215610e0f57600080fd5b6000610e1d85828601610d1e565b9250506020610e2e85828601610d33565b9150509250929050565b600060208284031215610e4a57600080fd5b6000610e5884828501610d33565b91505092915050565b610e6a816111d6565b82525050565b6000610e7b82611152565b610e85818561115d565b9350610e95818560208601611219565b610e9e816112dc565b840191505092915050565b6000610eb660238361115d565b9150610ec1826112ed565b604082019050919050565b6000610ed960228361115d565b9150610ee48261133c565b604082019050919050565b6000610efc601d8361115d565b9150610f078261138b565b602082019050919050565b6000610f1f60268361115d565b9150610f2a826113b4565b604082019050919050565b6000610f4260258361115d565b9150610f4d82611403565b604082019050919050565b6000610f6560248361115d565b9150610f7082611452565b604082019050919050565b6000610f8860258361115d565b9150610f93826114a1565b604082019050919050565b6000610fab601f8361115d565b9150610fb6826114f0565b602082019050919050565b610fca81611202565b82525050565b610fd98161120c565b82525050565b6000602082019050610ff46000830184610e61565b92915050565b600060208201905081810360008301526110148184610e70565b905092915050565b6000602082019050818103600083015261103581610ea9565b9050919050565b6000602082019050818103600083015261105581610ecc565b9050919050565b6000602082019050818103600083015261107581610eef565b9050919050565b6000602082019050818103600083015261109581610f12565b9050919050565b600060208201905081810360008301526110b581610f35565b9050919050565b600060208201905081810360008301526110d581610f58565b9050919050565b600060208201905081810360008301526110f581610f7b565b9050919050565b6000602082019050818103600083015261111581610f9e565b9050919050565b60006020820190506111316000830184610fc1565b92915050565b600060208201905061114c6000830184610fd0565b92915050565b600081519050919050565b600082825260208201905092915050565b600061117982611202565b915061118483611202565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111b9576111b861127e565b5b828201905092915050565b60006111cf826111e2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561123757808201518184015260208101905061121c565b83811115611246576000848401525b50505050565b6000600282049050600182168061126457607f821691505b60208210811415611278576112776112ad565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b611522816111c4565b811461152d57600080fd5b50565b61153981611202565b811461154457600080fd5b5056fea26469706673582212200b81fb78d095bfa81c87c49aa5ed1a35a405abb01b7fba4e8d0ab1dc9c33b31064736f6c63430008040033";

type UsdtTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UsdtTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UsdtToken__factory extends ContractFactory {
  constructor(...args: UsdtTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UsdtToken";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UsdtToken> {
    return super.deploy(overrides || {}) as Promise<UsdtToken>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UsdtToken {
    return super.attach(address) as UsdtToken;
  }
  connect(signer: Signer): UsdtToken__factory {
    return super.connect(signer) as UsdtToken__factory;
  }
  static readonly contractName: "UsdtToken";
  public readonly contractName: "UsdtToken";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UsdtTokenInterface {
    return new utils.Interface(_abi) as UsdtTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UsdtToken {
    return new Contract(address, _abi, signerOrProvider) as UsdtToken;
  }
}
